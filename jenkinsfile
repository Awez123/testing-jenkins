// Jenkinsfile for deploying Helm charts to EKS

pipeline {
    agent {
        kubernetes {
            yaml """
apiVersion: v1
kind: Pod
spec:
  serviceAccountName: jenkins
  containers:
  - name: devops
    image: alpine/git:latest
    command: ['sleep']
    args: ['99d']
    tty: true
    resources:
      limits:
        memory: "512Mi"
        cpu: "500m"
      requests:
        memory: "256Mi"
        cpu: "200m"
  restartPolicy: Never
"""
            defaultContainer 'devops'
        }
    }

    environment {
        AWS_REGION = 'ap-south-1'
        CLUSTER_NAME = 'hh-stg-eks'
        NGINX_CHART_PATH = './nginx'
        PROMETHEUS_CHART_PATH = './prometheus'
        K8S_NAMESPACE = 'test'
        AWS_VENV_PATH = '/tmp/venv_awscli'
        KUBECONFIG = '/root/.kube/config'
    }

    stages {
        stage('Clone Repo') {
            steps {
                script {
                    git 'https://github.com/Awez123/testing-jenkins.git'
                }
            }
        }

        stage('Install Tools') {
            steps {
                script {
                    sh '''
                        echo "üéØ Installing kubectl..."
                        apk add --no-cache curl
                        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                        chmod +x kubectl
                        mv kubectl /usr/local/bin/

                        echo "üéØ Installing bash..."
                        apk add --no-cache bash

                        echo "üéØ Installing Helm..."
                        export VERIFY_CHECKSUM=false
                        curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

                        echo "‚úÖ Verifying tools..."
                        kubectl version --client
                        helm version
                    '''
                }
            }
        }

        stage('Configure kubeconfig') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'jenkinsuser']]) {
                    sh '''
                        echo "üîß Setting up AWS CLI and kubeconfig..."
                        apk add --no-cache python3 py3-pip
                        python3 -m venv ${AWS_VENV_PATH}
                        . ${AWS_VENV_PATH}/bin/activate
                        pip install awscli
                        aws eks --region ${AWS_REGION} update-kubeconfig --name ${CLUSTER_NAME}
                        kubectl config current-context
                        kubectl get nodes
                        deactivate
                    '''
                }
            }
        }

        stage('Deploy NGINX') {
            steps {
                script {
                    sh '''
                        echo "üöÄ Deploying NGINX..."
                        . ${AWS_VENV_PATH}/bin/activate
                        kubectl create namespace ${K8S_NAMESPACE} || echo "Namespace ${K8S_NAMESPACE} already exists"
                        if [ -d "${NGINX_CHART_PATH}" ]; then
                            helm upgrade --install my-nginx ${NGINX_CHART_PATH} --namespace ${K8S_NAMESPACE} --wait
                            echo "NGINX deployment successful."
                        else
                            echo "NGINX chart not found at ${NGINX_CHART_PATH}"
                            exit 1
                        fi
                        deactivate
                    '''
                }
            }
        }

        stage('Deploy Prometheus') {
            steps {
                script {
                    sh '''
                        echo "üìä Deploying Prometheus..."
                        . ${AWS_VENV_PATH}/bin/activate
                        kubectl create namespace ${K8S_NAMESPACE} || echo "Namespace ${K8S_NAMESPACE} already exists"
                        if [ -d "${PROMETHEUS_CHART_PATH}" ]; then
                            helm upgrade --install my-prometheus ${PROMETHEUS_CHART_PATH} --namespace ${K8S_NAMESPACE} --wait
                            echo "Prometheus deployment successful."
                        else
                            echo "Prometheus chart not found at ${PROMETHEUS_CHART_PATH}"
                            exit 1
                        fi
                        deactivate
                    '''
                }
            }
        }
    }

    post {
        always {
            script {
                echo currentBuild.result == 'SUCCESS' ? "‚úÖ Pipeline completed successfully!" : "‚ùå Pipeline failed. Check logs."
            }
        }
    }
}
