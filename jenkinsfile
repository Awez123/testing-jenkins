// Jenkinsfile for deploying Helm charts to EKS

// Define the Kubernetes agent.
// We'll use a more general-purpose Alpine image and install necessary tools.
pipeline {
    agent {
        kubernetes {
            // Using alpine/git as a base, which includes git.
            // We will explicitly install kubectl and helm in the 'Install Tools' stage.
            yaml """
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: devops
    image: alpine/git:latest # Using an Alpine image that includes git
    command: ['sleep']
    args: ['99d']
    tty: true
    resources:
      limits:
        memory: "512Mi"
        cpu: "500m"
      requests:
        memory: "256Mi"
        cpu: "200m"
  restartPolicy: Never
"""
            defaultContainer 'devops'
        }
    }

    environment {
        AWS_REGION = 'ap-south-1'
        CLUSTER_NAME = 'hh-stg-eks'
        // Define paths to your Helm charts relative to the repository root
        NGINX_CHART_PATH = './nginx'
        PROMETHEUS_CHART_PATH = './prometheus'
        K8S_NAMESPACE = 'test' // Namespace for deployment
        // Define the path to the virtual environment for AWS CLI
        AWS_VENV_PATH = '/tmp/venv_awscli'
    }

    stages {
        stage('Clone Repo') {
            steps {
                script {
                    // The 'alpine/git' image already contains git, so this should work.
                    git 'https://github.com/Awez123/testing-jenkins.git'
                }
            }
        }

        stage('Install Tools') {
            steps {
                script {
                    // Install kubectl and Helm within the 'devops' container.
                    // Using apk for Alpine Linux.
                    sh '''
                        echo "ðŸŽ¯ Installing kubectl..."
                        apk add --no-cache curl
                        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                        chmod +x kubectl
                        mv kubectl /usr/local/bin/

                        echo "ðŸŽ¯ Installing bash for Helm script compatibility..."
                        apk add --no-cache bash # Install bash explicitly

                        echo "ðŸŽ¯ Installing Helm..."
                        export VERIFY_CHECKSUM=false
                        # Explicitly use 'bash' to run the Helm installation script to avoid 'unknown operand' errors.
                        curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

                        echo "Verifying installations..."
                        # Removed --short flag as it's not supported by older kubectl versions
                        kubectl version --client
                        helm version
                    '''
                }
            }
        }

        stage('Configure kubeconfig') {
            steps {
                // Ensure the 'jenkinsuser' credentials ID exists in Jenkins and holds your AWS Access Key/Secret Key.
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'jenkinsuser']]) {
                    sh '''
                        echo "ðŸ”§ Setting up AWS CLI and kubeconfig..."
                        # Install Python and pip for virtual environment
                        apk add --no-cache python3 py3-pip

                        # Create and activate a virtual environment for AWS CLI
                        python3 -m venv ${AWS_VENV_PATH}
                        . ${AWS_VENV_PATH}/bin/activate

                        # Install AWS CLI into the virtual environment
                        pip install awscli

                        # Ensure the virtual environment's bin directory is added to PATH for subsequent stages
                        # This creates a temporary script that will be sourced later.
                        echo "export PATH=${AWS_VENV_PATH}/bin:\$PATH" > /tmp/set_aws_path.sh

                        # Configure AWS CLI and kubeconfig
                        aws eks --region ${AWS_REGION} update-kubeconfig --name ${CLUSTER_NAME}
                        kubectl config current-context
                        kubectl get nodes # Test connectivity

                        # Deactivate the virtual environment (optional, as PATH is now set via script)
                        deactivate
                    '''
                }
            }
        }

        stage('Deploy NGINX') {
            steps {
                script {
                    // Source the script to ensure AWS CLI is in PATH for this stage
                    sh '''
                        . /tmp/set_aws_path.sh
                        echo "ðŸš€ Deploying NGINX..."
                        # Check if the chart directory exists before deploying
                        if [ -d "${NGINX_CHART_PATH}" ]; then
                            helm upgrade --install my-nginx ${NGINX_CHART_PATH} --namespace ${K8S_NAMESPACE} --create-namespace --wait
                            echo "NGINX deployment successful."
                        else
                            echo "NGINX Helm chart directory not found: ${NGINX_CHART_PATH}"
                            exit 1 # Fail the stage if directory not found
                        fi
                    '''
                }
            }
        }

        stage('Deploy Prometheus') {
            steps {
                script {
                    // Source the script to ensure AWS CLI is in PATH for this stage
                    sh '''
                        . /tmp/set_aws_path.sh
                        echo "ðŸ“Š Deploying Prometheus..."
                        # Check if the chart directory exists before deploying
                        if [ -d "${PROMETHEUS_CHART_PATH}" ]; then
                            helm upgrade --install my-prometheus ${PROMETHEUS_CHART_PATH} --namespace ${K8S_NAMESPACE} --create-namespace --wait
                            echo "Prometheus deployment successful."
                        else
                            echo "Prometheus Helm chart directory not found: ${PROMETHEUS_CHART_PATH}"
                            exit 1 # Fail the stage if directory not found
                        fi
                    '''
                }
            }
        }
    }

    post {
        always {
            script {
                if (currentBuild.result == 'SUCCESS') {
                    echo "Pipeline finished successfully!"
                } else {
                    echo "Pipeline failed. Check logs for details."
                }
            }
        }
    }
}
