pipeline {
    agent {
        kubernetes {
            yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    purpose: eks-deploy
spec:
  serviceAccountName: jenkins
  containers:
  - name: aws-tools
    image: jerinpaul/awscli-helm-kubectl:latest
    command: ['cat']
    tty: true
    resources:
      limits:
        memory: "1Gi"
        cpu: "1000m"
      requests:
        memory: "512Mi"
        cpu: "500m"
  restartPolicy: Never
"""
            defaultContainer 'aws-tools'
        }
    }

    environment {
        AWS_REGION = 'ap-south-1'
        CLUSTER_NAME = 'hh-stg-eks'
        NGINX_CHART_PATH = './nginx'
        NGINX_NAMESPACE = 'nginx'
        KUBECONFIG_PATH = '/workspace/kubeconfig'
    }

    stages {
        stage('Clone Repo') {
            steps {
                git 'https://github.com/Awez123/testing-jenkins.git'
            }
        }

        stage('Configure AWS & kubeconfig') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'jenkinsuser']]) {
                    sh '''
                        echo "üîê Authenticating with AWS..."
                        aws sts get-caller-identity

                        echo "üìã Listing EKS clusters..."
                        aws eks list-clusters --region ${AWS_REGION}

                        echo "üîß Updating kubeconfig for ${CLUSTER_NAME}..."
                        aws eks update-kubeconfig --region ${AWS_REGION} \
                            --name ${CLUSTER_NAME} \
                            --kubeconfig ${KUBECONFIG_PATH}

                        echo "‚úÖ Testing Kubeconfig..."
                        export KUBECONFIG=${KUBECONFIG_PATH}
                        kubectl config current-context
                        kubectl get nodes
                        kubectl auth can-i list secrets --namespace ${NGINX_NAMESPACE}
                    '''
                }
            }
        }

        stage('Deploy NGINX Helm Chart') {
            steps {
                sh '''
                    echo "üöÄ Deploying NGINX chart..."
                    export KUBECONFIG=${KUBECONFIG_PATH}
                    helm upgrade --install my-nginx ${NGINX_CHART_PATH} \
                        --namespace ${NGINX_NAMESPACE} \
                        --create-namespace \
                        --wait

                    echo "‚úÖ NGINX deployed successfully!"
                    kubectl get all -n ${NGINX_NAMESPACE}
                '''
            }
        }
    }

    post {
        always {
            echo currentBuild.result == 'SUCCESS' ? "‚úÖ Pipeline completed successfully!" : "‚ùå Pipeline failed. Check logs."
        }
    }
}
